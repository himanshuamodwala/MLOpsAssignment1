name: M1 - CI/CD Pipeline

on:
  pull_request:
    branches:
      - 'main'

jobs:
  validate_code_linting:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint M3/m3.py
        run: |
          flake8 M3/m3_copy.py | tee lint-output.txt
          cat lint-output.txt

      - name: Check lint output
        id: check_lint
        run: |
          if [ -s lint-output.txt ]; then
            echo "lint_issues=true" >> $GITHUB_ENV
          else
            echo "lint_issues=false" >> $GITHUB_ENV
          fi

      - name: Create issue if lint fails
        if: env.lint_issues == 'true'
        uses: actions/github-script@v6
        id: create_issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const lintOutput = fs.readFileSync('lint-output.txt', 'utf8');
            const issue = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: 'Linting issues found in M3/m3.py',
              body: `Linting failed for M3/m3.py in pull request #${{ github.event.pull_request.number }}.\n\nDetails:\n\`\`\`\n${lintOutput}\n\`\`\``
            });
            return { issue_number: issue.data.number };

      - name: Fail action if lint issues exist
        if: env.lint_issues == 'true'
        run: |
          echo "Failing the job due to linting errors."
          exit 1 

  build_model:
    runs-on: ubuntu-latest
    needs: validate_code_linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scikit-learn optuna joblib

      - name: Run model training script
        id: run_model
        run: |
          python M3/m3_copy.py

      - name: Validate Model and Hyperparameters
        id: validate_model
        run: |
          python -c "
import joblib

# Load the model and evaluate its performance
model = joblib.load('best_model.pkl')
scaler = joblib.load('scaler.pkl')

# Check if the hyperparameters are within the expected range
best_params = model.get_params()
if not (10 <= best_params['n_estimators'] <= 100 and 2 <= best_params['max_depth'] <= 32 and 2 <= best_params['min_samples_split'] <= 14):
    raise ValueError('Best parameters are out of the expected range')

# Print the best parameters
print(f'::set-output name=n_estimators::{best_params["n_estimators"]}')
print(f'::set-output name=max_depth::{best_params["max_depth"]}')
print(f'::set-output name=min_samples_split::{best_params["min_samples_split"]}')
"
  
  validate_unit_test_cases:
    runs-on: ubuntu-latest
    needs: validate_code_linting

    steps:
      - name: Print Hello World
        run: |
          echo "Hello World from Unit Test Validation!"

  build_and_deploy_application:
    runs-on: ubuntu-latest
    needs: validate_unit_test_cases

    steps:
      - name: Print Hello World
        run: |
          echo "Hello World from Build and Deploy!"
