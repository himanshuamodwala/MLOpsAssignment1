name: CD Pipeline


on: 
  workflow_dispatch:


jobs:
  validate_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check if on main branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "This workflow must be run from the main branch."
            exit 1
          else
            echo "On the main branch, proceeding with workflow."
          fi

  
  build_model:
    runs-on: ubuntu-latest
    needs: validate_branch
    permissions:
      contents: write
    steps:
      - name: Checkout latest version of main branch
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scikit-learn optuna joblib
      - name: Run model training script
        run: |
          python M3/m3.py
      - name: Temporarily save model artifact
        uses: actions/upload-artifact@v3
        with:
          name: best_model_artifact
          path: ${{ github.workspace }}
          retention-days: 1

  
  deploy_model:
    runs-on: ubuntu-latest
    needs: build_model
    permissions:
      contents: write
    steps:
      - name: Retrieve saved model artifact
        uses: actions/download-artifact@v3
        with:
          name: best_model_artifact
          path: ${{ github.workspace }}
      - name: Set up docker
        uses: docker/setup-buildx-action@v2
      - name: Log into DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build docker image
        run: |
          echo "
          FROM python:3.12-slim
          WORKDIR /app
          COPY requirements.txt /app
          COPY best_model.pkl /app
          COPY scaler.pkl /app
          COPY M3/m3_flask.py /app
          RUN pip install --no-cache-dir -r requirements.txt
          EXPOSE 5000
          ENV NAME World
          CMD [\"python\", \"m3_flask.py\"]
          " > Dockerfile
          docker build -t m3-local-model:latest .
      - name: Deploy model to DockerHub
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          docker tag m3-local-model:latest ${{ secrets.DOCKER_USERNAME }}/m3-local-model:$TIMESTAMP
          docker tag m3-local-model:latest ${{ secrets.DOCKER_USERNAME }}/m3-local-model:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/m3-local-model:$TIMESTAMP
          docker push ${{ secrets.DOCKER_USERNAME }}/m3-local-model:latest
